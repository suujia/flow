// Code generated by go-swagger; DO NOT EDIT.

package spots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteSpotHandlerFunc turns a function with the right signature into a delete spot handler
type DeleteSpotHandlerFunc func(DeleteSpotParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteSpotHandlerFunc) Handle(params DeleteSpotParams) middleware.Responder {
	return fn(params)
}

// DeleteSpotHandler interface for that can handle valid delete spot params
type DeleteSpotHandler interface {
	Handle(DeleteSpotParams) middleware.Responder
}

// NewDeleteSpot creates a new http.Handler for the delete spot operation
func NewDeleteSpot(ctx *middleware.Context, handler DeleteSpotHandler) *DeleteSpot {
	return &DeleteSpot{Context: ctx, Handler: handler}
}

/*DeleteSpot swagger:route DELETE /{id} spots deleteSpot

DeleteSpot delete spot API

*/
type DeleteSpot struct {
	Context *middleware.Context
	Handler DeleteSpotHandler
}

func (o *DeleteSpot) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteSpotParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
